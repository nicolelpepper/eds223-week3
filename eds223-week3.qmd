---
title:  "EDS 223: Week 3"
format:  html
editor_options: 
  chunk_output_type: console
---

```{r}
library(sf)
library(tmap)
library(tidyverse)
library(spData)

```

```{r}
nz <- spData::nz
nz_height <- spData::nz_height
canterbury <- nz %>%
  filter(Name == "Canterbury")

```

```{r}
tm_shape(nz) + 
    tm_polygons() + 
  tm_shape(canterbury) + 
  tm_fill(col = "darkgrey") + 
  tm_shape(nz_height) + 
  tm_dots(col = "red")
```

```{r}
# Subset to nz_height for those that intersect with canterbury
c_height1<- nz_height[canterbury, ]

nz_height[canterbury, , op = st_disjoint]

c_height2 <- nz_height %>% 
  st_filter(y = canterbury, .predicate = st_intersects)

```

```{r}
# sparse binary predicate list
nz_height_sgbp <- st_intersects(x = nz_height, y = canterbury)
nz_height_logical <- lengths(nz_height_sgbp) > 0
c_height3 <- nz_height[nz_height_logical,]

```


```{r}
st_join(nz_height, nz, join = st_intersects) %>%
  select(id = t50_fid, elevation, region = Name) %>%
  group_by(region) %>%
  summarise(n_points = n()) %>%
  st_drop_geometry()
```


```{r}
cycle_hire <- spData::cycle_hire
cycle_hire_osm <- spData::cycle_hire_osm

tmap_mode("view")

tm_shape(cycle_hire) + 
  tm_symbols(col = 'red', alpha = 0.2) + 
  tm_shape(cycle_hire_osm) + 
  tm_symbols(col = "blue", alpha = 0.2)

```

```{r}
cycle_hire_join <- st_join(cycle_hire, cycle_hire_osm,
                           st_is_within_distance,
                           dist = units::set_units(20, "m"))
```


```{r}
if(nrow(cycle_hire) == nrow(cycle_hire_join)){
  print("join matches original data dimensions")
} else {
  warning("join does not match orginal data dimensions")
  print(paste("cycle_hire has", nrow(cycle_hire), "rows"))
  print(paste("cycle_hire_join has", nrow(cycle_hire_join), "rows"))
}
```


```{r}
# load US states
us_states <- spData::us_states

# summarize total population within each region
regions1 <- us_states %>%
  group_by(REGION) %>%
  summarise(population = sum(total_pop_15, na.rm = TRUE))

# alternative approach
regions2 <- aggregate(x = us_states[, "total_pop_15"], # data and attribute to be aggregated
                      by = list(us_states$REGION), # attribute to aggregate by
                      FUN = sum, na.rm = TRUE) # aggregating function
```


```{r}
# combine geometries of western states
us_west <- us_states[us_states$REGION == "West", ]
us_west_union <- st_union(us_west)

tm_shape(us_west_union) +
  tm_polygons()

# combine geometries of Texas and western states
texas <- us_states[us_states$NAME == "Texas", ]
texas_union <- st_union(us_west_union, texas)
tm_shape(texas_union)+
  tm_polygons()
```

```{r}
# Buffering
tmap_mode("view")

seine <- spData::seine

seine_buffer <- st_buffer(seine, dist = 5000)
seine_buffer_50km = st_buffer(seine, dist = 50000)

seine_union <- st_union(seine_buffer)

tm_shape(seine_union) + 
  tm_polygons() + 
  tm_shape(seine) + 
  tm_lines()
```

```{r}
nz_height_buffer <- st_buffer(nz_height, dist = 1000000)

# Same as st_filter with st_is_within_distance
c_height5 <- nz_height_buffer %>%
  st_filter(y = canterbury, .predicate = st_intersects)

if(nrow(c_height3) == nrow(c_height5)){
  print("results match")
} else {
  warning("results do not match")
}
```

```{r}
x <- st_sfc(st_point(c(0, 1))) %>%
  st_buffer(., dist = 1) %>%
  st_as_sf()

y <- st_sfc(st_point(c(1, 1))) %>%
  st_buffer(., dist = 1) %>%
  st_as_sf()

intersection <- st_intersection(x, y)
difference_x_y <- st_difference(x, y)
difference_y_x <- st_difference(y, x)
union <- st_union(x, y)
sym_difference <- st_sym_difference(x, y)
```

```{r}

tmap_mode("plot")

# create random points
bb <- st_bbox(st_union(x, y)) # create bounding box of x and y
box <- st_as_sfc(bb)
p <- st_sample(x = box, size = 100) %>% # randomly sample the bounding box
  st_as_sf()

# find intersection of x and y
x_and_y <- st_intersection(x, y)

# filter points
# first approach: bracket subsetting
p_xy1 = p[x_and_y, ]

# second approach: st_filter()
p_xy2 <- p %>%
  st_filter(., x_and_y)

# third approach: st_intersection()
p_xy3 = st_intersection(p, x_and_y)

  tm_shape(x) + 
  tm_borders(col = "red") + 
  tm_shape(y) + 
  tm_borders(col = "blue") + 
  tm_shape(p_xy2) + 
  tm_dots()
```


```{r}
nz_centroid <- st_centroid(nz)
seine_centroid <- st_centroid(seine)

nz_pos <- st_point_on_surface(nz)
seine_pos <- st_point_on_surface(seine)

tm_shape(nz) + 
  tm_polygons() + 
  tm_shape(nz_centroid) + 
  tm_symbols(col = "red", alpha = 0.5) + 
  tm_shape(nz_pos) + 
  tm_symbols(col = "blue", alpha = 0.5)
```

Simplification
```{r}
seine_simple <- st_simplify(seine, dTolerance = 2000)

tm_shape(seine) +
  tm_lines()

tm_shape(seine_simple) +
  tm_lines()
```

